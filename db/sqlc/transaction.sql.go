// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    from_user_id, to_user_id, amount, description
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, from_user_id, to_user_id, date, amount, description
`

type CreateTransactionParams struct {
	FromUserID  pgtype.UUID
	ToUserID    pgtype.UUID
	Amount      int64
	Description pgtype.Text
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.FromUserID,
		arg.ToUserID,
		arg.Amount,
		arg.Description,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Date,
		&i.Amount,
		&i.Description,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, from_user_id, to_user_id, date, amount, description FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id pgtype.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.Date,
		&i.Amount,
		&i.Description,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, from_user_id, to_user_id, date, amount, description FROM transactions
ORDER BY date DESC
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromUserID,
			&i.ToUserID,
			&i.Date,
			&i.Amount,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
